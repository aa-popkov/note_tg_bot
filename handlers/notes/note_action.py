from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from keyboards.notes import get_my_notes_kb, get_edit_note_kb, get_main_notes_kb
from schemas.callback.note import NoteActionCallback, NoteAction, NotesCallback
from models.user_notes import UserNote
from utils import states
from utils.states import NotesState
from utils.bot import bot

router = Router(name=__name__)


@router.callback_query(NoteActionCallback.filter(F.action == NoteAction.delete))
async def note_action_delete_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    note_id = NoteActionCallback.unpack(callback.data).id
    delete_result = await UserNote.delete_note(note_id)

    notes_count = await UserNote.get_count_by_user(str(callback.from_user.id))
    callback_counter = NotesCallback(
        current_page=1,
        next_page=2,
        previous_page=0,
        max_page=(notes_count // 5) + 1,
    )
    notes = await UserNote.get_all_notes_by_user(str(callback.from_user.id))
    try:
        await callback.message.delete()
    except Exception as e:
        if len(notes) > 0:
            await callback.message.edit_text(
                text=f"–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞",
                reply_markup=get_my_notes_kb(notes, callback_counter),
            )
        else:
            await callback.message.edit_text(
                text="–£ —Ç–µ–±—è –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∑–∞–º–µ—Ç–æ–∫\n"
                     "\n"
                     "üìù –í –º–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫: /notes\n"
                     "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /menu",
                reply_markup=None
            )
        return
    await callback.bot.send_message(
        chat_id=callback.from_user.id,
        text="–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞",
        reply_markup=get_main_notes_kb()
    )


@router.callback_query(NoteActionCallback.filter(F.action == NoteAction.edit))
async def note_action_edit_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    note_id = NoteActionCallback.unpack(callback.data).id
    note = await UserNote.get_note_by_id(str(callback.from_user.id), note_id)
    await state.set_state(NotesState.edit_note)
    await state.set_data({"note_id": note.id})
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=f"–í–æ—Ç —Ç–≤–æ—è –∑–∞–º–µ—Ç–∫–∞: <b>{note.title}</b>\n"
        f"<i>–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ–ø–∏—Ä—É–π –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å –∑–∞–Ω–æ–≤–æ</i>\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–æ–π –≤–Ω–∏–∑—É\n\n"
        f"{note.text}",
        reply_markup=get_edit_note_kb(),
    )
    await callback.message.delete()


@router.message(StateFilter(states.NotesState.edit_note), F.content_type != "text")
async def note_action_edit_non_text(message: Message, state: FSMContext):
    await message.reply(
        text="–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç!\n"
        "–ó–∞–º–µ—Ç–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
        reply_markup=get_edit_note_kb(),
    )


@router.message(StateFilter(states.NotesState.edit_note), F.content_type == "text")
async def note_action_edit_text(message: Message, state: FSMContext):
    note_id = (await state.get_data())["note_id"]
    note = await UserNote.get_note_by_id(str(message.from_user.id), note_id)
    note.text = message.text
    note.title = UserNote.convert_title(message.text)
    await UserNote.update_note(note)
    await state.set_state(states.MainState.notes)
    await message.answer(
        text="–ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        reply_markup=get_main_notes_kb(),
    )
